generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model with role-based access (Admin, Coordinator, Client)
// model User {
//     id        String   @id @default(cuid())
//     email     String   @unique
//     password  String
//     role      UserRole @default(CLIENT)
//     firstName String?
//     lastName  String?
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     isActive  Boolean  @default(true)

//     // Different fields based on role
//     // Admin fields
//     adminLevel  AdminLevel? // Only for ADMIN role
//     permissions String[] // Only for ADMIN role

//     // Coordinator fields
//     department String? // Only for COORDINATOR role
//     region     String? // Only for COORDINATOR role

//     // Client fields
//     clientId String? // Only for CLIENT role
//     company  String? // Only for CLIENT role

//     // Common fields for all roles
//     refreshTokens RefreshToken[]

//     // For future implementation
//     profileImage         String?
//     isVerified           Boolean   @default(false)
//     verificationToken    String?
//     resetPasswordToken   String?
//     resetPasswordExpires DateTime?

//     @@map("users")
// }

model User {
    id                  String      @id @default(cuid())
    email               String      @unique
    password            String
    role                UserRole    @default(CLIENT)
    defaultPassword     String
    status              String? // e.g. 'Active', 'Inactive', 'Pending'
    // Name & contact
    firstName           String
    middleName          String?
    lastName            String
    gender              String?
    dob                 DateTime?
    phone               String?
    unitApartmentNumber String?
    address             String?
    emergencyContact    String?
    employmentType      String? // e.g. 'Full-time', 'Part-time', 'Contractor'
    kinName             String? // Next of kin name
    kinPhone            String? // Next of kin phone number
    kinEmail            String? // Next of kin email address
    kinRelation         String? // Next of kin relation (e.g. 'Parent', 'Sibling', 'Friend') 
    // Admin-specific
    adminLevel          AdminLevel? // Only for ADMIN role
    permissions         String[] // Only for ADMIN role

    // Coordinator-specific
    department String? // Only for COORDINATOR role
    region     String? // Only for COORDINATOR role

    // Client-specific
    clientId String? // Only for CLIENT role
    company  String? // Only for CLIENT role

    // Common optional fields
    profileImage         String?
    profileImagePublicId String? // Cloudinary public ID for the profile image
    languageSpoken       String?
    isVerified           Boolean   @default(false)
    verificationToken    String?
    resetPasswordToken   String?
    resetPasswordExpires DateTime?
    licenseNumber        String?
    specialization       String?
    joinedDate           DateTime  @default(now())
    lastLogin            DateTime?
    twoFactorEnabled     Boolean   @default(false)
    emailNotifications   Boolean   @default(true)
    smsNotifications     Boolean   @default(true)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    isActive            Boolean @default(true)
    sendOnboardingEmail Boolean @default(true)
    inviteStaffViaSMS   Boolean @default(false)

    // Relations
    refreshTokens RefreshToken[]
    documents     Document[] // one-to-many

    @@map("users")
}

// Enum for user roles
enum UserRole {
    ADMIN
    COORDINATOR
    CLIENT
}

// Enum for admin levels
enum AdminLevel {
    SUPER
    STANDARD
}

// RefreshToken model for JWT refresh tokens
model RefreshToken {
    id        String   @id @default(cuid())
    token     String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isRevoked Boolean  @default(false)
    ipAddress String?
    userAgent String?

    @@map("refresh_tokens")
}

model Client {
    id             String    @id @default(cuid())
    title          String?
    firstName      String
    middleName     String?
    lastName       String
    phone          String?
    email          String?   @unique
    address        String?
    gender         String?
    dob            DateTime?
    maritalStatus  String?
    religion       String?
    nationality    String?
    languageSpoken String?
    status         String? // e.g. 'Active', 'Inactive', 'Pending'

    profilePictureUrl    String?
    profileImagePublicId String? // Cloudinary public ID for the profile image

    generalInfo     String?
    usefulInfo      String?
    needToKnowInfo  String?
    ndisNumber      String?
    agedCareId      String?
    referenceNumber String?
    poNumber        String?
    customField     String?

    clientType    String?
    smsReminders  Boolean @default(false)
    invoiceTravel Boolean @default(false)

    // Arrays (stored as separate tables/relations)
    contacts  Contact[] // one-to-many
    teams     Team[] // many-to-many or one-to-many
    documents Document[] // one-to-many
    forms     Form[] // one-to-many

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Team {
    id      String   @id @default(cuid())
    name    String
    clients Client[] // many-to-many relation if needed
}

model Document {
    id            String  @id @default(cuid())
    name          String
    url           String // This should be the S3 public or signed URL
    imagePublicId String? // Cloudinary public ID for the profile image

    type       String? // Optional: e.g. 'PDF', 'IMAGE', 'DOCX', etc.
    uploadedAt DateTime @default(now())
    client     Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
    user       User?    @relation(fields: [userId], references: [id])
    userId     String?
    clientId   String
}

model Form {
    id       String @id @default(cuid())
    title    String
    data     Json
    client   Client @relation(fields: [clientId], references: [id])
    clientId String
}

model Contact {
    id            String  @id @default(cuid())
    title         String?
    firstName     String
    lastName      String
    email         String?
    contactNumber String?
    address       String?

    relation        String? // e.g. 'Parent', 'Guardian', 'Friend'
    companyName     String?
    purchaseOrder   String?
    referenceNumber String?
    isPrimary       Boolean @default(false)
    isBilling       Boolean @default(false)
    client          Client  @relation(fields: [clientId], references: [id])
    clientId        String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Blog {
    id            String  @id @default(cuid())
    title         String
    author        String
    type          String
    status        String
    excerpt       String
    content       String
    featuredImage String?
    imagePublicId String? // Cloudinary public ID for the profile image

    publishDate     DateTime?
    tags            String[] // Stored as string array (PostgreSQL only)
    metaTitle       String
    metaDescription String
    isFeatured      Boolean   @default(false)
    slug            String    @unique
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}
